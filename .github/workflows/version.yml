name: Semantic Versioning

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.github/**'

jobs:
  version:
    name: Create version tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Initialize first version if none exists
        run: |
          if ! git tag | grep -q "^v"; then
            git tag v0.1.0
            echo "Created initial version v0.1.0"
          fi
      
      - name: Get commit messages since last version
        id: get_commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # If no tags exist, get all commits
            COMMITS=$(git log --format="%s")
          else
            # Get commits since last tag
            COMMITS=$(git log $LAST_TAG..HEAD --format="%s")
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: bump
        run: |
          COMMITS="${{ steps.get_commits.outputs.commits }}"
          
          # Initialize bump type to 'patch' by default
          BUMP_TYPE="patch"
          
          # Check commit messages for conventional commit format
          while read -r commit; do
            if [[ "$commit" == "feat!"* ]] || [[ "$commit" == "fix!"* ]] || [[ "$commit" == "BREAKING CHANGE"* ]]; then
              BUMP_TYPE="major"
              break
            elif [[ "$commit" == "feat"* ]] && [[ "$BUMP_TYPE" != "major" ]]; then
              BUMP_TYPE="minor"
            fi
          done <<< "$COMMITS"
          
          echo "type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          
          # Extract version numbers
          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          else
            MAJOR=0
            MINOR=1
            PATCH=0
          fi
          
          # Bump version based on commit analysis
          case "${{ steps.bump.outputs.type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          
          # Create and push new tag
          git tag $NEW_TAG
          git push origin $NEW_TAG
          
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Created and pushed new tag: $NEW_TAG"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          generate_release_notes: true
